# ## Configure "ip" variable to bind kubernetes services on a
# ## different ip than the default iface
# ## We should set etcd_member_name for etcd cluster. The node that is not a etcd member do not need to set the value, or can set the empty string value.
[all]
%{ for i in range(length(master["ip"])) ~}
${master["name"][i]} ansible_host=${master["ip"][i]} ansible_user=ubuntu ansible_ssh_common_args='-o StrictHostKeyChecking=no'
%{ endfor ~}
%{ for i in range(length(worker["ip"])) ~}
${worker["name"][i]} ansible_host=${worker["ip"][i]} ansible_user=ubuntu ansible_ssh_common_args='-o StrictHostKeyChecking=no'
%{ endfor ~}

# node1 ansible_host=95.54.0.12  # ip=10.3.0.1 etcd_member_name=etcd1
# node2 ansible_host=95.54.0.13  # ip=10.3.0.2 etcd_member_name=etcd2
# node3 ansible_host=95.54.0.14  # ip=10.3.0.3 etcd_member_name=etcd3
# node4 ansible_host=95.54.0.15  # ip=10.3.0.4 etcd_member_name=etcd4
# node5 ansible_host=95.54.0.16  # ip=10.3.0.5 etcd_member_name=etcd5
# node6 ansible_host=95.54.0.17  # ip=10.3.0.6 etcd_member_name=etcd6

# ## configure a bastion host if your nodes are not directly reachable
# [bastion]
# bastion ansible_host=x.x.x.x ansible_user=some_user

[kube_control_plane]
%{ for i in range(length(master["ip"])) ~}
${master["name"][i]}
%{ endfor ~}

[etcd]
%{ for i in range(length(master["ip"])) ~}
${master["name"][i]}
%{ endfor ~}

[kube_node]
%{ for i in range(length(worker["ip"])) ~}
${worker["name"][i]}
%{ endfor ~}


[k8s_cluster:children]
kube_control_plane
kube_node